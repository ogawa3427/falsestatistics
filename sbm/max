#!/bin/sh
##組み込まれエリア
oscreen() {
  case "$1" in
    -i|--min)
      :
      ;;
    *)
      echo "Undifined option"
      error
      ;;
  esac
}

fscreen() {
  if [ ! -f "$1" ]; then
    echo "Error:max: not a file."
    error
  else
    :
  fi
}

error() {
  echo "max: invalid input" >&2
  echo "Try 'max --help' for more information" >&2
  exit 1
}

##分岐後処理エリア
maxpipe() {
#  echo "maxpipe" >&2

  num=0
  while IFS= read -r line; do
    if [ "$num" = 0 ]; then
      max="$line"
    fi
    if [ "$line" -gt "$max" ]; then
      max="$line"
    fi
    if [ $((num % 1000)) = 0 ]; then echo "line $num" >&2; fi
    num=$((num + 1))
  done
  echo "$max"
  exit 0
}


minpipe() {
#  echo "minpipe" >&2

  num=0
  while IFS= read -r line; do
    if [ "$num" = 0 ]; then
      min="$line"
    fi
    if [ "$line" -lt "$min" ]; then
      min="$line"
    fi
    if [ $((num % 1000)) = 0 ]; then echo "line $num" >&2; fi
    num=$((num + 1))
  done
  echo "$min"
  exit 0
}

maxfile() {
#  echo "maxfile" >&2
  fscreen "$1"
  num=0
  while IFS= read -r line; do
    if [ "$num" -eq 0 ]; then
      max="$line"
    fi
    if [ "$line" -gt "$max" ]; then
      max="$line"
    fi
    if [ $((num % 1000)) = 0 ]; then echo "line $num" >&2; fi
    num=$((num + 1))
  done < "$1"
  echo "$max"
  exit 0
}

minfile() {
#  echo "minfile"
  fscreen "$1"
  num=0
  while IFS= read -r line; do
    if [ "$num" = 0 ]; then
      min="$line"
    fi
    if [ "$line" -lt "$min" ]; then
      min="$line"
    fi
    if [ $((num % 1000)) = 0 ]; then echo "line $num" >&2; fi
    num=$((num + 1))
  done < "$1"
  echo "$min"
  exit 0
}

helping() {

cat << EOF
NAME
    max - Calculates and outputs maximum value.

SYNOPSIS
    max [OPTION] [FILE]

DESCRIPTION
    Using option "-i, --min", you can get minimum value. 
    オプション "-iもしくは--min" で最小値を出力します
    These commands provide you the maximum/minimum value using integer style value separated by changing line.
    このコマンドは改行で区切られた整数の値の列から最大/最小値を出力します。
    For parsons, who think "To be working, or not to be, that is the question." about this command, number of the line proccessed will be put into the defailt error output (2>)
    1000行ごとに処理した行の番号を標準エラー出力します、ちゃんと動いているか心配な方のために。
    You can use pipe, file input and redirection. 
    パイプ、ファイル名指定、入力リダイレクトを使用できます。
    When you do not specify a file without any pipeline or redirection, inputs will be waited for.
    パイプもリダイレクトもなく、ファイル名を指定しなかった場合は数値入力を待ち続けます

OPTIONS
    -i/--min - work as "min"(calclating minimum one) 
    最小値を出力します

    -h/--help - shows helppage 
    この画面を表示します

    -- - let escape an argument after this
    以後の引数をオプションとして扱いません

BUGS
    It takes too long time to get output. 
    出力までが遅すぎる
    => You might use Rust lauguage, C language etc... 
    最近話題のRustとかCでたぶん同じことができると思います

    There are no advantage to write in Shell language. 
    シェルで書く必要があると思えない
    => If you realize so, should it be the time to learn how to use other tool such as Julia , MATLAB or sth like that? だったら別のなんか速い言語でやったら良いと思います。すぐ書けて動いて直せるシェルスクリプトもいいと思いますよ。

AUTHOR
    Written by REN Shimizu. Grramarly sopport by ChatGPT.

REPORTING BUGS
    Stu-mail in KU or twitter @stspecedjpstuku

COPYRIGHT
    You can change and use this script for any ways. There is no warranty, extent limitation by the law.
    法律による定めのない限り保証なく、自由にこのコマンドを使用することができます。

SEE ALSO
    https://jp.mathworks.com/products/matlab.html
    https://julialang.org/
    https://github.com/ogawa3427/falsestatistics/blob/main/sbm/Shimizu_max.md
    https://note.com/ogawa3427/n/n1e9462786009

EOF

  exit 0
}

<<<<<<< HEAD
###正しいフォームでコマンドが実行されているか＆引数が有効か？
#countif=3
if [ $# -ge 4 ]; then
  echo "Too many arguments."
=======

#不正な引数が入力されたら弾く
#我々はどこから来てどこへ行くのか
#香川式
filnum=0
optnum=0
dasnum=0

if [ -n "$1" ] && [ "$(echo "$1" | cut -c1)" != "-" ]; then
  filnum=$(expr $filnum + 1)
fi
if [ -n "$2" ] && [ "$(echo "$2" | cut -c1)" != "-" ]; then
  filnum=$(expr $filnum + 1)
fi
if [ -n "$3" ] && [ "$(echo "$3" | cut -c1)" != "-" ]; then
  filnum=$(expr $filnum + 1)
fi

case "$1" in
  -[a-z]*)
    optnum=$(expr $optnum + 1)
    ;;
  *)
    :
    ;;
esac
case "$2" in
  -[a-z]*)
    optnum=$(expr $optnum + 1)
    ;;
  *)
    :
    ;;
esac
case "$3" in
  -[a-z]*)
    optnum=$(expr $optnum + 1)
    ;;
  *)
    :
    ;;
esac

if [ "$(echo "$1" | grep -- "-[a-z]" | wc -l )" = "1" ]; then
  dasnum=$(expr $dasnum + 1)
fi
if [ "$(echo "$2" | grep -- "--" | wc -l )" = "1" ]; then
  dasnum=$(expr $dasnum + 1)
fi
if [ "$(echo "$3" | grep -- "--" | wc -l )" = "1" ]; then
  dasnum=$(expr $dasnum + 1)
fi
echo start
echo $optnum
echo $filnum
echo $dasnum
echo fin

# はじき
if [ $optnum -gt 1 ];then
  error
fi
if [ $filnum -gt 1 ];then
  error
fi
if [ $dasnum -gt 1 ];then
  error
fi



#オプション
che="$1$2$3"
ched="$(echo "$che" | sed 's/--min//g' | sed 's/-i//g' | sed 's/--help//g' | sed 's/-h//g' | sed 's/--//g' )"
if [ -n "$ched" ]; then
>>>>>>> 40e0f7e66d4274c5e06e0952d897c220fdf4109e
  error
fi
if [ $# -eq 3 ]; then
  if [ "$2" = "--" ]; then
    oscreen "$1"
    minfile "$3" #111
  else
    error
  fi
fi

#countif=2
if [ $# -eq 2 ]; then
  if [ "$2" = "--" ];then
    error #110
  elif [ "$1" = "--" ]; then
    maxfile "$2" #011
  else
    oscreen "$1"
    minfile "$2" #101
  fi
fi

#countif=1
if [ $# -eq 1 ]; then
  case "$1" in
    -h|--help)
      helping
  esac
  if [ "$1" = "--" ]; then
    error #010
  else
    if [ "$(echo "$1" | cut -c1)" = "-" ]; then
      oscreen "$1"
      maxpipe #100
    else
      maxfile "$1" #001
    fi
  fi
fi

#countif=0
maxpipe #000

#最終手段
error
